[hidden] {
  display: none !important;
}

button.touring.active::before {
  color: #ffa500;
  border: none;
}

.tooltip.measure {
  background-color: #C0C0C0;
  position: absolute;
  padding: 5px;	
  opacity: 1;
}

div.touring {
  margin-top: 0.5rem;
  overflow-y: auto;

  .measures, .output {
    border-top: #AAA 1px solid;

    a:hover, a:focus {
        color: #1f77b4;
        text-decoration: none;
    }

    a[aria-expanded="false"]::before {
      content: "\f18e ";
      font-family: FontAwesome;
      color: #333;
      font-size: 0.9em;
    }

    a[aria-expanded="true"]::before {
      content: "\f01a ";
      font-family: FontAwesome;
      color: #333;
      font-size: 0.9em;
    }

    .table-container {
      overflow-x: auto;
      
      table {
        $wide-col-padding: 0.5em;
        $narrow-col-padding: 0.2em;
        $col-min-size: 6ch;
        $col-max-size: 11em;
        
        table-layout: fixed; // The table and column widths are set by the widths of table and col or by the width of the first row of cells. Cells in other rows do not affect column widths.
        
        tbody.bottom-margin {
          border-bottom: 0.5rem solid white;  // table's border spacing applies to all rows and tbody has no margin
        }

        th {
          min-width: $col-min-size;
          max-width: $col-min-size;
          text-overflow: ellipsis;
          white-space: nowrap;
          padding: 0 $narrow-col-padding;

          &:not(.head) { // cells of row labels in header
            min-width: $col-min-size; //flexible from min to max
            max-width: $col-max-size;
            padding: 0 $wide-col-padding;
          }

          &.rotate {
            height:140px;

            > div {
              transform: 
                translate(25px, 51px) /* Magic Numbers */
                rotate(-45deg);
              width: 30px;
              
              > span {
                display: inline-block;  // to set a width
                min-width: $col-max-size; // same width as the row labels, but not flexible
                max-width: $col-max-size;
                box-sizing: border-box; // i dont want to mess with the padding

                border-bottom: 1px solid #ccc;
                padding-bottom: 2px;

                > span {
                  max-width: 100%; // just as wide as the parent
                  display: inline-block; // to make width & string truncation work
                  vertical-align: bottom; // at the bottom of the parent
                  overflow: hidden; // important to stop text at right border
                  white-space: nowrap; // no line breaks
                  text-overflow: ellipsis;
                  
                  box-sizing: border-box; // i dont want to mess with the padding
                  padding: 0.25em 0.5em;
                }
              }
            }
          }
        }

        td {
          &[rowspan] {
            vertical-align: text-top; // move text of multi-row cells to the top
          }

          &:not(.action) { // row labels
            min-width: $col-min-size;
            max-width: $col-max-size;
            padding: 0 $wide-col-padding;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }

          &.score {
            // no min-width here because than the cell gets larger on hover (wich makes the text bolder)
            max-width: $col-min-size;
            text-align: center; // padding workaround, because we make the font bolder on hover and can use the whitespace of the cell this way
            overflow: hidden;
            text-overflow: clip; // cells are so small, the ... would take to much space
            white-space: nowrap;

            border-style: solid;
            border-color: #ccc;
            border-width: 0px;
            border-right-width: 1px; // just on the right
          }

          &.action {
            &:hover, &:focus { // = td.action:hover
              background-color: #fba74d !important; // important because to overwrite the htmml inline color definition              
              font-weight: bolder;
            } 

            &.selectedCell {
              background-color: #fba74d !important; // important because to overwrite the htmml inline color definition
              font-weight: bolder; 
            }
          }

          &[data-type]::before {
            display: inline-block; // so that the width property works
            width: 1.2em; //to have some space between icon and the text in the td
            font-family: lu-font; // some icon font 
            color: #999; // #515151 is to dark
          }

          &[data-type='categorical']::before {
            content: "\e810";
          }
          &[data-type='number']::before {
            content: "\e811";
          }
        }
      }
    }

    .detailVis {
      border-top: #AAA 1px solid;
      margin: 0.2em 0 0.6em 0;
      padding: 0.2em 0;
    

      .detailDiv {
        font-weight: bold;
        color: #333;
      }

      .detailDiv span{
        font-weight: normal;
      }

      .detailDiv span.detail-label{
        font-weight: bold;
      }
    }
    
    // ------ parallel sets with D3
    .dimension tspan.name { font-size: 1.5em; fill: #333; font-weight: bold; }
    .dimension tspan.sort { fill: #000; cursor: pointer; opacity: 0; }
    .dimension tspan.sort:hover { fill: #333; }
    .dimension:hover tspan.name { fill: #000; }
    .dimension:hover tspan.sort { opacity: 1; }
    .dimension line { stroke: #000; }
    .dimension rect { stroke: none; fill-opacity: 0; }
    .dimension > rect, .category-background { fill: #fff; }
    .dimension > rect { display: none; }
    // .category:hover rect { fill-opacity: .3; }
    // .dimension:hover > rect { fill-opacity: .3; }
    svg .parSets .ribbon path { stroke-opacity: 0; fill-opacity: .5; }
    //.ribbon path.active { fill-opacity: .9; }
    .ribbon-mouse path { fill-opacity: 0; stroke: none; }
    .ribbon path.selected { fill-opacity: .9 !important; } //new
    .category rect.selected { fill-opacity: .3; } //new
    .dimension:hover > rect.selcted { fill-opacity: .3; } //new

    // predefined colours
    .category-0 { fill: #1f77b4; stroke: #1f77b4; }
    .category-1 { fill: #ff7f0e; stroke: #ff7f0e; }
    .category-2 { fill: #2ca02c; stroke: #2ca02c; }
    .category-3 { fill: #d62728; stroke: #d62728; }
    .category-4 { fill: #9467bd; stroke: #9467bd; }
    .category-5 { fill: #8c564b; stroke: #8c564b; }
    .category-6 { fill: #e377c2; stroke: #e377c2; }
    .category-7 { fill: #7f7f7f; stroke: #7f7f7f; }
    .category-8 { fill: #bcbd22; stroke: #bcbd22; }
    .category-9 { fill: #17becf; stroke: #17becf; }
    .category-10 { fill: #aec7e8; stroke: #aec7e8; }
    .category-11 { fill: #ffbb78; stroke: #ffbb78; }
    .category-12 { fill: #98df8a; stroke: #98df8a; }
    .category-13 { fill: #ff9896; stroke: #ff9896; }
    .category-14 { fill: #c5b0d5; stroke: #c5b0d5; }
    .category-15 { fill: #c49c94; stroke: #c49c94; }
    .category-16 { fill: #f7b6d2; stroke: #f7b6d2; }
    .category-17 { fill: #c7c7c7; stroke: #c7c7c7; }
    .category-18 { fill: #dbdb8d; stroke: #dbdb8d; }
    .category-19 { fill: #9edae5; stroke: #9edae5; }

    .category-gray { fill: #808080 !important; stroke: #808080 !important; }
    .category-selected { fill: #fba74d !important; stroke: #fba74d !important; }

    

    // ------ boxplot with D3
    g.box-element text {
      stroke: none;
      fill: black;
    }

    g.box-element {
      rect.box {
        stroke: black;
        stroke-width: 1;
        stroke-opacity: 0;
        fill-opacity: .5;
      }
      line.center, line.median, line.whisker{
        stroke-opacity: 0.2;
      }
    }
  
    g.box-element.selected {
      rect.box{
        stroke: black;
        stroke-width: 1;
        stroke-opacity: 1;
        fill-opacity: 1;
      }
      line.center, line.median, line.whisker{
        stroke-opacity: 1;
      }
    }

    // ------ scattter plot with D3
    g.scatterplot circle.datapoint{
      stroke: none;
      opacity: 1;
      fill: black;
    }
    g.scatterplot circle.datapoint:hover{
      opacity: 1;
      fill: #fba74d  !important;
    }

    // // ------ line chart with D3
    g.linechart path.dataline{
      fill-opacity: 0;
      fill: #fba74d;
      stroke-width: 2;
      stroke-linejoin: "round";
      stroke-linecap: "round";
    }

    g.linechart g.baseline{
      fill: "none";
      stroke-width: 1;
      stroke-linejoin: "round";
      stroke-linecap: "round";
      stroke: black;
    }

    g.linechart path.dataline:hover{
      fill-opacity: 0.4;
    }
  }
}